{"version":3,"sources":["customHooks/dataFetching.js","components/common/common.js","components/GitHub/GitHubRepos.js","components/GitHub/Followers.js","components/GitHub/GitHubUsers.js","components/GitHub/GitHub.js","App.js","reportWebVitals.js","index.js"],"names":["useDataFetching","url","params","isCurrent","useRef","useState","data","dataState","state","setState","request","axios","get","then","res","current","catch","err","console","log","useEffect","newUrl","newParams","TableContainer","props","className","children","LoadingContainer","GitHubRepos","endPoint","q","sort","per_page","order","type","items","map","item","idx","id","name","description","stargazers_count","onClick","Followers","timer","setInterval","clearInterval","followers","GitHubUsers","login","src","avatar_url","width","alt","GitHub","GITHUB_API","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a26cd934.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\n/**\n *\n * @param {string} url - endpoint\n * @param {obj} params - request params\n * @returns {data, dataState, request}\n */\nexport const useDataFetching = (url = null, params = {}) => {\n  //to avoid errors if the component no longer exists\n  const isCurrent = useRef(true);\n  const [state, setState] = useState({ data: null, dataState: \"PENDING\" });\n\n  const request = (url) => {\n    if (!url) return;\n    axios\n      .get(url, { params })\n      .then((res) => {\n        if (isCurrent.current) {\n          setState({ data: res.data, dataState: \"FULFILLED\" });\n        }\n      })\n      .catch((err) => {\n        if (isCurrent.current) {\n          console.log(err);\n          setState({ data: null, dataState: \"REJECTED\" });\n        }\n      });\n  };\n\n  useEffect(() => {\n    request(url, params);\n    return () => {\n      // called when the component is going to unmount\n      isCurrent.current = false;\n    };\n  }, []);\n\n  return [\n    state,\n    (newUrl = url, newParams = params) => {\n      setState(() => ({\n        data: null,\n        dataState: \"PENDING\",\n      }));\n      request(newUrl, newParams);\n    },\n  ];\n};\n","import React from \"react\";\n\nconst TableContainer = (props) => {\n  return <div className=\"table\">{props.children}</div>;\n};\n\nconst LoadingContainer = () => {\n  return <span className=\"loading-container\">LOADING...</span>;\n};\n\nexport { TableContainer, LoadingContainer };\n","import React from \"react\";\nimport { useDataFetching } from \"../../customHooks/dataFetching\";\nimport { LoadingContainer, TableContainer } from \"../common/common\";\n\nconst GitHubRepos = ({ endPoint }) => {\n  const [{ data, dataState }, request] = useDataFetching(\n    `${endPoint}search/repositories`,\n    {\n      q: \"created:>2021-01-01\",\n      sort: \"stars\",\n      per_page: 5,\n      order: \"desc\",\n      type: \"Repositories\",\n    }\n  );\n\n  // console.log(\"REPO\", { data, dataState });\n\n  return (\n    <article>\n      <h1>GitHubRepos</h1>\n      <TableContainer>\n        <div className=\"table-header\">\n          <span>id</span>\n          <span>name</span>\n          <span> description </span>\n          <span>number of stars</span>\n        </div>\n\n        {dataState === \"FULFILLED\" ? (\n          data.items.map((item, idx) => {\n            return (\n              <div key={`GitHubRepos-row-${idx}`}>\n                <span>{item.id && item.id}</span>\n                <span>{item.name && item.name}</span>\n                <span>{item.description && item.description}</span>\n                <span>{item.stargazers_count && item.stargazers_count}</span>\n              </div>\n            );\n          })\n        ) : dataState === \"PENDING\" ? (\n          <LoadingContainer />\n        ) : (\n          \"ERROR\"\n        )}\n      </TableContainer>\n      <button onClick={() => request()} id=\"hot_repo\">\n        refresh repo\n      </button>\n    </article>\n  );\n};\n\nexport default GitHubRepos;\n","import React, { useEffect, useRef } from \"react\";\nimport { useDataFetching } from \"../../customHooks/dataFetching\";\n\nconst Followers = ({ endPoint }) => {\n  const [{ data, dataState }, request] = useDataFetching(`${endPoint}`);\n\n  //   console.log(\"Followers\", { data, dataState });\n\n  const timer = useRef();\n\n  useEffect(() => {\n    // to refresh the number of followers\n    timer.current = setInterval(() => {\n      request && request();\n    }, 120000);\n    return () => {\n      clearInterval(timer.current);\n    };\n  }, []);\n\n  return (\n    <p>\n      {dataState === \"FULFILLED\"\n        ? data.followers && data.followers\n        : dataState === \"PENDING\"\n        ? \"...\"\n        : \"ERROR\"}\n    </p>\n  );\n};\n\nexport default Followers;\n","import React from \"react\";\nimport { useDataFetching } from \"../../customHooks/dataFetching\";\nimport { LoadingContainer, TableContainer } from \"../common/common\";\nimport Followers from \"./Followers\";\n\nconst GitHubUsers = ({ endPoint }) => {\n  const [{ data, dataState }, request] = useDataFetching(\n    `${endPoint}search/users`,\n    {\n      q: \"created:>2020-10-24\",\n      sort: \"followers\",\n      per_page: 5,\n      order: \"desc\",\n      type: \"Users\",\n    }\n  );\n\n  // console.log(\"USERS\", { data, dataState });\n\n  return (\n    <article>\n      <h1>GitHubUsers</h1>\n      <TableContainer>\n        <div className=\"table-header\">\n          <span>id</span>\n          <span>login</span>\n          <span>avatar image </span>\n          <span>number of followers</span>\n        </div>\n        {dataState === \"FULFILLED\" ? (\n          data.items.map((item, idx) => {\n            return (\n              <div key={`GitHubUsers-row-${idx}`}>\n                <span>{item.id}</span>\n                <span>{item.login}</span>\n                <span>\n                  <img\n                    src={item.avatar_url}\n                    width=\"45\"\n                    alt={`${item.login}-avatar`}\n                  />\n                </span>\n                <span>\n                  <Followers endPoint={item.url} />\n                </span>\n              </div>\n            );\n          })\n        ) : dataState === \"PENDING\" ? (\n          <LoadingContainer />\n        ) : (\n          \"ERROR\"\n        )}\n      </TableContainer>\n      <button onClick={() => request()} id=\"prolific_users\">\n        refresh users\n      </button>\n    </article>\n  );\n};\n\nexport default GitHubUsers;\n","import React from \"react\";\nimport GitHubRepos from \"./GitHubRepos\";\nimport GitHubUsers from \"./GitHubUsers\";\n\nconst GitHub = () => {\n  const GITHUB_API = \"https://api.github.com/\";\n  return (\n    <div>\n      <GitHubRepos endPoint={GITHUB_API} />\n      <GitHubUsers endPoint={GITHUB_API} />\n    </div>\n  );\n};\n\nexport default GitHub;\n","import GitHub from \"./components/GitHub/GitHub\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h6>home test - GitHub API</h6>\n      </header>\n      <GitHub />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}