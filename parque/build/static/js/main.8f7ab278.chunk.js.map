{"version":3,"sources":["hook/useDataFetching.js","ui-components/media/ImageLoader.jsx","DataFetching.js","App.js","serviceWorker.js","index.js"],"names":["useDataFetching","endpoint","params","isCurrent","useRef","useState","data","dataState","state","setState","callYourMom","cancel","axios","method","url","cancelToken","CancelToken","c","then","res","current","catch","err","console","log","isCancel","useEffect","newUrl","newParams","ImageLoader","props","lazyLoading","lazyOptions","root","threshold","rootMargin","lazyCallback","imgRef","observer","isIntersecting","target","src","classList","remove","unobserve","disconnect","styles","onLoad","alt","imgElementRef","useCallback","node","IntersectionObserver","entries","observe","ref","className","window","DataFetching","posts","setPosts","map","item","idx","key","style","minHeight","e","onClick","post","id","title","album","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8f7ab278.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useDataFetching = (endpoint = null, params = \"\") => {\r\n  // ter referência ao componente para caso o seu useRef ser false\r\n  // não correr o setState\r\n  const isCurrent = useRef(true);\r\n  const [state, setState] = useState({ data: null, dataState: \"PENDING\" });\r\n\r\n  const callYourMom = (endpoint, params) => {\r\n    if (!endpoint) return;\r\n    let cancel;\r\n\r\n    axios({\r\n      method: \"GET\",\r\n      url: endpoint, // string\r\n      params: params, // {}\r\n      cancelToken: new axios.CancelToken((c) => (cancel = c)),\r\n    })\r\n      .then((res) => {\r\n        if (isCurrent.current) {\r\n          setState({ data: res.data, dataState: \"FULFILLED\" });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (isCurrent.current) {\r\n          console.log(err);\r\n          if (axios.isCancel(err)) return;\r\n          setState({ data: null, dataState: \"REJECTED\" });\r\n        }\r\n      });\r\n\r\n    return () => cancel();\r\n  };\r\n\r\n  useEffect(() => {\r\n    callYourMom(endpoint, params);\r\n    return () => {\r\n      // called when the component is going to unmount\r\n      isCurrent.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return [\r\n    state,\r\n    (newUrl = endpoint, newParams = params) => {\r\n      setState((state) => ({\r\n        data: null,\r\n        dataState: \"PENDING\",\r\n      }));\r\n      callYourMom(newUrl, newParams);\r\n    },\r\n  ];\r\n};\r\n\r\nexport default useDataFetching;\r\n","import React from \"react\";\r\nimport { useRef, useCallback } from \"react\";\r\n\r\n/**\r\n * \r\n * @param {\r\n    * lazyLoading // true || false\r\n    * lazyOptions // {} - options for observer\r\n    * lazyCallback // function - callback for observer\r\n    * styles // \"\" - class to img\r\n    * src // \"\" - class to img\r\n    * alt // \"\" - img alt\r\n    * onLoad // function - run onload\r\n    * } props \r\n    */\r\n\r\nconst ImageLoader = (props) => {\r\n  const {\r\n    lazyLoading = true,\r\n    lazyOptions = {\r\n      root: null,\r\n      threshold: 0,\r\n      rootMargin: \"0px 0px 100px 0px\",\r\n    },\r\n    lazyCallback = (imgRef, observer) => {\r\n      if (imgRef.isIntersecting) {\r\n        console.log(\"lazyCallback\", imgRef);\r\n        imgRef.target.src = src;\r\n        imgRef.target.classList.remove(\"lazy-loading\");\r\n        observer.current.unobserve(imgRef.target);\r\n        observer.current.disconnect();\r\n      } else {\r\n      }\r\n    },\r\n    styles = \"\",\r\n    src,\r\n    onLoad,\r\n    alt,\r\n  } = props;\r\n\r\n  const observer = useRef();\r\n\r\n  const imgElementRef = useCallback((node) => {\r\n    observer.current = new IntersectionObserver((entries) => {\r\n      lazyCallback(entries[0], observer);\r\n    }, lazyOptions);\r\n    if (node) observer.current.observe(node);\r\n  }, [observer]);\r\n\r\n  return (\r\n    <img\r\n      ref={lazyLoading && imgElementRef || observer}\r\n      className={(lazyLoading ? \"lazy-loading \" : \"\") + styles}\r\n      // loading=\"lazy\"\r\n      //data-lazy-src={lazyLoading ? src : null}\r\n      onLoad={onLoad || null}\r\n      src={\"IntersectionObserver\" in window && lazyLoading ? null : src}\r\n      alt={alt || null}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ImageLoader;\r\n","import React from \"react\";\r\nimport useDataFetching from \"./hook/useDataFetching\";\r\nimport ImageLoader from \"./ui-components/media/ImageLoader\";\r\n\r\nconst DataFetching = () => {\r\n  const [posts, setPosts] = useDataFetching(\r\n    \"https://jsonplaceholder.typicode.com/posts\"\r\n  );\r\n  const [{ data, dataState }, setAlbums] = useDataFetching(\r\n    \"https://jsonplaceholder.typicode.com/albums\"\r\n  );\r\n\r\n  console.log(posts);\r\n\r\n  /*   setTimeout(() => {\r\n    ;\r\n  }, 2000); */\r\n\r\n  const imgList = [\r\n    \"https://picsum.photos/1600/500?random=1\",\r\n    \"https://picsum.photos/1600/500?random=2\",\r\n    \"https://picsum.photos/1600/500?random=3\",\r\n    \"https://picsum.photos/1600/500?random=4\",\r\n    \"https://picsum.photos/1600/500?random=5\",\r\n    \"https://picsum.photos/1600/500?random=6\",\r\n    \"https://picsum.photos/1600/500?random=7\",\r\n    \"https://picsum.photos/1600/500?random=8\",\r\n    \"https://picsum.photos/1600/500?random=9\",\r\n    \"https://picsum.photos/1600/500?random=10\",\r\n    \"https://picsum.photos/1600/500?random=11\",\r\n    \"https://picsum.photos/1600/500?random=12\",\r\n    \"https://picsum.photos/1600/500?random=13\",\r\n    \"https://picsum.photos/1600/500?random=14\",\r\n    \"https://picsum.photos/1600/500?random=15\",\r\n    \"https://picsum.photos/1600/500?random=17\",\r\n    \"https://picsum.photos/1600/500?random=18\",\r\n    \"https://picsum.photos/1600/500?random=19\",\r\n    \"https://picsum.photos/1600/500?random=20\",\r\n    \"https://picsum.photos/1600/500?random=21\",\r\n    \"https://picsum.photos/1600/500?random=22\",\r\n    \"https://picsum.photos/1600/500?random=23\",\r\n    \"https://picsum.photos/1600/500?random=24\",\r\n    \"https://picsum.photos/1600/500?random=25\",\r\n    \"https://picsum.photos/1600/500?random=26\",\r\n    \"https://picsum.photos/1600/500?random=27\",\r\n    \"https://picsum.photos/1600/500?random=28\",\r\n    \"https://picsum.photos/1600/500?random=29\",\r\n    \"https://picsum.photos/1600/500?random=30\",\r\n    \"https://picsum.photos/1600/500?random=31\",\r\n    \"https://picsum.photos/1600/500?random=32\",\r\n    \"https://picsum.photos/1600/500?random=33\",\r\n    \"https://picsum.photos/1600/500?random=34\",\r\n    \"https://picsum.photos/1600/500?random=35\",\r\n    \"https://picsum.photos/1600/500?random=37\",\r\n    \"https://picsum.photos/1600/500?random=38\",\r\n    \"https://picsum.photos/1600/500?random=39\",\r\n    \"https://picsum.photos/1600/500?random=40\",\r\n    \"https://picsum.photos/1600/500?random=41\",\r\n    \"https://picsum.photos/1600/500?random=42\",\r\n    \"https://picsum.photos/1600/500?random=43\",\r\n    \"https://picsum.photos/1600/500?random=44\",\r\n    \"https://picsum.photos/1600/500?random=45\",\r\n    \"https://picsum.photos/1600/500?random=47\",\r\n    \"https://picsum.photos/1600/500?random=48\",\r\n    \"https://picsum.photos/1600/500?random=49\",\r\n    \"https://picsum.photos/1600/500?random=50\",\r\n    \"https://picsum.photos/1600/500?random=51\",\r\n    \"https://picsum.photos/1600/500?random=52\",\r\n    \"https://picsum.photos/1600/500?random=53\",\r\n    \"https://picsum.photos/1600/500?random=54\",\r\n    \"https://picsum.photos/1600/500?random=55\",\r\n    \"https://picsum.photos/1600/500?random=57\",\r\n    \"https://picsum.photos/1600/500?random=58\",\r\n    \"https://picsum.photos/1600/500?random=59\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {imgList.map((item, idx) => {\r\n        return (\r\n          <div key={`img-${idx}`} style={{minHeight: '504px'}}>\r\n            <ImageLoader src={item} lazyLoading={true} onLoad={(e)=> console.log(\"load bitch\", e.target)} />\r\n          </div>\r\n        );\r\n      })}\r\n\r\n      <div>\r\n        {posts.dataState === \"PENDING\" ? (\r\n          <h4>Loading Posts</h4>\r\n        ) : posts.dataState === \"REJECTED\" ? (\r\n          <h4>ERROR</h4>\r\n        ) : (\r\n          <ul>\r\n            <div onClick={() => setPosts()}>\r\n              <h3>new bitch call</h3>\r\n            </div>\r\n            {posts.data &&\r\n              posts.data.map((post) => {\r\n                return <li key={post.id}>{post.title}</li>;\r\n              })}\r\n          </ul>\r\n        )}\r\n\r\n        <hr />\r\n\r\n        {dataState === \"PENDING\" ? (\r\n          <h4>Loading albums</h4>\r\n        ) : dataState === \"REJECTED\" ? (\r\n          <h4>ERROR</h4>\r\n        ) : (\r\n          <ul>\r\n            {data &&\r\n              data.map((album) => {\r\n                return <li key={album.id}>{album.title}</li>;\r\n              })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// https://jsonplaceholder.typicode.com/posts\r\n//https://jsonplaceholder.typicode.com/albums\r\n\r\nexport default DataFetching;\r\n","import React from 'react';\nimport './App.css';\nimport DataFetching from './DataFetching';\nimport CatalogVodsContainer from './vods/VodsContainer';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <DataFetching />\n      {/* <CatalogVodsContainer /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}