{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joaobaltazar/Desktop/_SANDBOX/js-sandBox/_NEXT_JS/next-intro/pages/page-pre-rendering/get-static-paths/[productId].js\";\nimport { Fragment } from \"react\"; //file system acess\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst ProductDetailPage = props => {\n  const {\n    loadedProduct\n  } = props; // if fallback getStaticPaths is true\n  // you need a loading/noData state\n\n  if (!loadedProduct) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 30\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: loadedProduct.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: \"Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loadedProduct.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nconst getData = async () => {\n  // cwd: corrent working directory\n  const filePath = path.join(process.cwd(), \"pages/page-pre-rendering/data\", \"dummy-data.json\");\n  const jsonData = await fs.readFileSync(filePath);\n  const data = JSON.parse(jsonData);\n  return data;\n}; //tell to nextJs the pages needed to render\n\n\nconst getStaticPaths = async () => {\n  const data = await getData();\n  const ids = data.products.map(product => product.id);\n  const patsWithParams = ids.map(id => ({\n    params: {\n      productId: id\n    }\n  }));\n  return {\n    // shold return an array with path objects\n    paths: patsWithParams,\n    //fallback - BOLLEAN\n    // false if the obj have all paths in the array\n    // true||\"blocking\" generat the page when is needed\n    //true de forma async \"bom para criar uma pag de fallback para o user a dizer que está a carregar, para seo n será tão bom\"\n    //\"blocking\" - bloqueia o pedido da pag até ter a pag renderizada\n    fallback: \"blocking\" // neste caso o indicado é false pk estamos a gerar todos os paths\n\n  };\n};\n\nconst getStaticProps = async context => {\n  console.log(context); // get params page\n\n  const {\n    params\n  } = context;\n  const productId = params.productId;\n  const data = await getData();\n  const product = data.products.find(product => product.id === productId);\n\n  if (!product) {\n    return {\n      notFound: true\n    };\n  }\n\n  return {\n    props: {\n      loadedProduct: product\n    }\n  };\n};\n\nexport default ProductDetailPage;\nexport { getStaticProps, getStaticPaths };","map":{"version":3,"sources":["/Users/joaobaltazar/Desktop/_SANDBOX/js-sandBox/_NEXT_JS/next-intro/pages/page-pre-rendering/get-static-paths/[productId].js"],"names":["Fragment","fs","path","ProductDetailPage","props","loadedProduct","title","description","getData","filePath","join","process","cwd","jsonData","readFileSync","data","JSON","parse","getStaticPaths","ids","products","map","product","id","patsWithParams","params","productId","paths","fallback","getStaticProps","context","console","log","find","notFound"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAoBD,KAA1B,CADmC,CAGnC;AACA;;AACA,MAAI,CAACC,aAAL,EAAoB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEpB,sBACE,QAAC,QAAD;AAAA,4BACE;AAAA,gBAAKA,aAAa,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAID,aAAa,CAACE;AAAlB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAdD;;AAgBA,MAAMC,OAAO,GAAG,YAAY;AAC1B;AACA,QAAMC,QAAQ,GAAGP,IAAI,CAACQ,IAAL,CACfC,OAAO,CAACC,GAAR,EADe,EAEf,+BAFe,EAGf,iBAHe,CAAjB;AAKA,QAAMC,QAAQ,GAAG,MAAMZ,EAAE,CAACa,YAAH,CAAgBL,QAAhB,CAAvB;AACA,QAAMM,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAb;AAEA,SAAOE,IAAP;AACD,CAXD,C,CAaA;;;AACA,MAAMG,cAAc,GAAG,YAAY;AACjC,QAAMH,IAAI,GAAG,MAAMP,OAAO,EAA1B;AAEA,QAAMW,GAAG,GAAGJ,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAaA,OAAO,CAACC,EAAvC,CAAZ;AACA,QAAMC,cAAc,GAAGL,GAAG,CAACE,GAAJ,CAASE,EAAD,KAAS;AACtCE,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAEH;AADL;AAD8B,GAAT,CAAR,CAAvB;AAKA,SAAO;AACL;AACAI,IAAAA,KAAK,EAAEH,cAFF;AAIL;AACA;AACA;AACA;AACA;AACAI,IAAAA,QAAQ,EAAE,UATL,CASiB;;AATjB,GAAP;AAWD,CApBD;;AAsBA,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EADwC,CAExC;;AACA,QAAM;AAAEL,IAAAA;AAAF,MAAaK,OAAnB;AACA,QAAMJ,SAAS,GAAGD,MAAM,CAACC,SAAzB;AAEA,QAAMX,IAAI,GAAG,MAAMP,OAAO,EAA1B;AACA,QAAMc,OAAO,GAAGP,IAAI,CAACK,QAAL,CAAca,IAAd,CAAoBX,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeG,SAA/C,CAAhB;;AAEA,MAAI,CAACJ,OAAL,EAAc;AACZ,WAAO;AACLY,MAAAA,QAAQ,EAAE;AADL,KAAP;AAGD;;AAED,SAAO;AACL9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,aAAa,EAAEiB;AADV;AADF,GAAP;AAKD,CApBD;;AAsBA,eAAenB,iBAAf;AACA,SAAS0B,cAAT,EAAyBX,cAAzB","sourcesContent":["import { Fragment } from \"react\";\n//file system acess\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst ProductDetailPage = (props) => {\n  const { loadedProduct } = props;\n\n  // if fallback getStaticPaths is true\n  // you need a loading/noData state\n  if (!loadedProduct) return <h1>Loading...</h1>;\n\n  return (\n    <Fragment>\n      <h1>{loadedProduct.title}</h1>\n      <h6>Description</h6>\n      <p>{loadedProduct.description}</p>\n    </Fragment>\n  );\n};\n\nconst getData = async () => {\n  // cwd: corrent working directory\n  const filePath = path.join(\n    process.cwd(),\n    \"pages/page-pre-rendering/data\",\n    \"dummy-data.json\"\n  );\n  const jsonData = await fs.readFileSync(filePath);\n  const data = JSON.parse(jsonData);\n\n  return data;\n};\n\n//tell to nextJs the pages needed to render\nconst getStaticPaths = async () => {\n  const data = await getData();\n\n  const ids = data.products.map((product) => product.id);\n  const patsWithParams = ids.map((id) => ({\n    params: {\n      productId: id,\n    },\n  }));\n  return {\n    // shold return an array with path objects\n    paths: patsWithParams,\n\n    //fallback - BOLLEAN\n    // false if the obj have all paths in the array\n    // true||\"blocking\" generat the page when is needed\n    //true de forma async \"bom para criar uma pag de fallback para o user a dizer que está a carregar, para seo n será tão bom\"\n    //\"blocking\" - bloqueia o pedido da pag até ter a pag renderizada\n    fallback: \"blocking\", // neste caso o indicado é false pk estamos a gerar todos os paths\n  };\n};\n\nconst getStaticProps = async (context) => {\n  console.log(context);\n  // get params page\n  const { params } = context;\n  const productId = params.productId;\n\n  const data = await getData();\n  const product = data.products.find((product) => product.id === productId);\n\n  if (!product) {\n    return {\n      notFound: true,\n    };\n  }\n\n  return {\n    props: {\n      loadedProduct: product,\n    },\n  };\n};\n\nexport default ProductDetailPage;\nexport { getStaticProps, getStaticPaths };\n"]},"metadata":{},"sourceType":"module"}