{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/joaobaltazar/Desktop/_SANDBOX/js-sandBox/_NEXT_JS/next-intro/pages/page-pre-rendering/get-static-paths/[productId].js\",\n    _this = this;\n\nimport { Fragment } from \"react\"; //file system acess\n\nimport Head from \"next/head\";\n\nvar ProductDetailPage = function ProductDetailPage(props) {\n  var loadedProduct = props.loadedProduct; // if fallback getStaticPaths is true\n  // you need a loading/noData state\n\n  if (!loadedProduct) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 30\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: loadedProduct.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: loadedProduct.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: loadedProduct.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: \"Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loadedProduct.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = ProductDetailPage;\n// const getStaticProps = async (context) => {\n//   console.log(context);\n//   // get params page\n//   const { params } = context;\n//   const productId = params.productId;\n//   const data = await getData();\n//   const product = data.products.find((product) => product.id === productId);\n//   if (!product) {\n//     return {\n//       notFound: true,\n//     };\n//   }\n//   return {\n//     props: {\n//       loadedProduct: product,\n//     },\n//   };\n// };\nexport var __N_SSG = true;\nexport default ProductDetailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductDetailPage\");","map":{"version":3,"sources":["/Users/joaobaltazar/Desktop/_SANDBOX/js-sandBox/_NEXT_JS/next-intro/pages/page-pre-rendering/get-static-paths/[productId].js"],"names":["Fragment","Head","ProductDetailPage","props","loadedProduct","title","description"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AAGA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAAA,MAC3BC,aAD2B,GACTD,KADS,CAC3BC,aAD2B,EAGnC;AACA;;AACA,MAAI,CAACA,aAAL,EAAoB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEpB,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,aAAa,CAACC;AAAtB;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAED,aAAa,CAACE;AAAhD;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAKE;AAAA,gBAAKF,aAAa,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,aALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANF,eAOE;AAAA,gBAAID,aAAa,CAACE;AAAlB;AAAA;AAAA;AAAA;AAAA,aAPF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CAlBD;;KAAMJ,iB;AAwDN;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,iBAAf","sourcesContent":["import { Fragment } from \"react\";\n//file system acess\nimport fs from \"fs\";\nimport path from \"path\";\nimport Head from \"next/head\";\n\nconst ProductDetailPage = (props) => {\n  const { loadedProduct } = props;\n\n  // if fallback getStaticPaths is true\n  // you need a loading/noData state\n  if (!loadedProduct) return <h1>Loading...</h1>;\n\n  return (\n    <Fragment>\n      <Head>\n        <title>{loadedProduct.title}</title>\n        <meta name=\"description\" content={loadedProduct.description} />\n      </Head>\n      <h1>{loadedProduct.title}</h1>\n      <h6>Description</h6>\n      <p>{loadedProduct.description}</p>\n    </Fragment>\n  );\n};\n\nconst getData = async () => {\n  // cwd: corrent working directory\n  const filePath = path.join(\n    process.cwd(),\n    \"pages/page-pre-rendering/data\",\n    \"dummy-data.json\"\n  );\n  const jsonData = await fs.readFileSync(filePath);\n  const data = JSON.parse(jsonData);\n\n  return data;\n};\n\n//tell to nextJs the pages needed to render\nconst getStaticPaths = async () => {\n  const data = await getData();\n\n  const ids = data.products.map((product) => product.id);\n  const patsWithParams = ids.map((id) => ({\n    params: {\n      productId: id,\n    },\n  }));\n  return {\n    // shold return an array with path objects\n    paths: patsWithParams,\n\n    //fallback - BOLLEAN\n    // false if the obj have all paths in the array\n    // true||\"blocking\" generat the page when is needed\n    //true de forma async \"bom para criar uma pag de fallback para o user a dizer que está a carregar, para seo n será tão bom\"\n    //\"blocking\" - bloqueia o pedido da pag até ter a pag renderizada\n    fallback: \"blocking\", // neste caso o indicado é false pk estamos a gerar todos os paths\n  };\n};\n\n// const getStaticProps = async (context) => {\n//   console.log(context);\n//   // get params page\n//   const { params } = context;\n//   const productId = params.productId;\n\n//   const data = await getData();\n//   const product = data.products.find((product) => product.id === productId);\n\n//   if (!product) {\n//     return {\n//       notFound: true,\n//     };\n//   }\n\n//   return {\n//     props: {\n//       loadedProduct: product,\n//     },\n//   };\n// };\n\nexport default ProductDetailPage;\nexport { getStaticPaths };\n"]},"metadata":{},"sourceType":"module"}